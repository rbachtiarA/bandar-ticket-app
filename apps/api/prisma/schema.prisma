// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples") // if you want to use snake_case format
}

model Provinces {
  id     Int    @id @default(autoincrement())
  name   String @unique
  cities City[]
}

model City {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  province   Provinces @relation(fields: [provinceID], references: [id])
  provinceID Int
  Event      Event[]
}

enum EventCatergory {
  Seminar
  Entertainment
  Sport
  Music
  Gallery
}

model Event {
  id           Int            @id @default(autoincrement())
  category     EventCatergory
  name         String         @unique
  slug         String         @default("slug")
  description  String?        @db.LongText
  location     String
  city         City           @relation(fields: [cityId], references: [id])
  date_start   DateTime
  date_end     DateTime
  time_start   String         @default("00:00")
  time_end     String         @default("00:00")
  img_poster   String
  ticket_type  TicketType[]
  max_quota    Int
  Review       Review[]
  DiscountType DiscountType[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt()
  cityId       Int
}

model TicketType {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  price       Int
  event       Event   @relation(fields: [eventID], references: [id])
  eventID     Int
  quota       Int

  @@map("ticket_type")
}

model DiscountType {
  id        Int     @id @default(autoincrement())
  name      String
  isNominal Boolean
  discount  Int
  event     Event   @relation(fields: [eventID], references: [id])
  eventID   Int
}

model Review {
  id         Int      @id @default(autoincrement())
  review     String
  rating     Int
  event      Event    @relation(fields: [eventID], references: [id])
  eventID    Int
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()
}

model Customer {
  id     Int      @id @default(autoincrement())
  name   String
  Review Review[]
}
