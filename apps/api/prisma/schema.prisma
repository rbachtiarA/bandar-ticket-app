// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples") // if you want to use snake_case format
}

model Provinces {
  id     Int    @id @default(autoincrement())
  name   String @unique
  cities City[]
}

model City {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  province   Provinces @relation(fields: [provinceID], references: [id])
  provinceID Int
  Event      Event[]
}

enum EventCatergory {
  Seminar
  Entertainment
  Sport
  Music
  Gallery
}

model Event {
  id           Int            @id @default(autoincrement())
  category     EventCatergory
  name         String         @unique
  slug         String         @default("slug")
  description  String?        @db.LongText
  location     String
  city         City           @relation(fields: [cityId], references: [id])
  date_start   DateTime
  date_end     DateTime
  time_start   String         @default("00:00")
  time_end     String         @default("00:00")
  img_poster   String
  ticket_type  TicketType[]
  max_quota    Int
  Review       Review[]
  DiscountType DiscountType[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt()
  cityId       Int
  user         User?          @relation(fields: [userId], references: [id])
  userId       Int?
}

model TicketType {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Int
  event       Event    @relation(fields: [eventID], references: [id])
  eventID     Int
  quota       Int
  ticket      Ticket[]

  @@map("ticket_type")
}

model Ticket {
  id                Int             @id @default(autoincrement())
  ticketType        TicketType      @relation(fields: [ticketTypeId], references: [id])
  ticketTypeId      Int
  transaction       TrasactionEvent @relation(fields: [trasactionEventId], references: [id])
  trasactionEventId Int
  createdAt         DateTime        @default(now())
}

model DiscountType {
  id          Int    @id @default(autoincrement())
  name        String
  nominal     Int?
  percent     Int?
  event       Event  @relation(fields: [eventID], references: [id])
  eventID     Int
  minQuantity Int?
  minPrice    Int?
}

model Review {
  id         Int      @id @default(autoincrement())
  review     String
  rating     Int
  event      Event    @relation(fields: [eventID], references: [id])
  eventID    Int
  customer   User     @relation(fields: [customerId], references: [id])
  customerId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()
}

model TrasactionEvent {
  id         Int      @id @default(autoincrement())
  Ticket     Ticket[]
  totalPrice Int
  createdAt  DateTime @default(now())
  User       User     @relation(fields: [userId], references: [id])
  userId     Int
}

model User {
  id               Int       @id @default(autoincrement())
  name             String
  email            String    @unique
  password         String
  referCode        String    @unique
  wallet           Int       @default(0)
  role             Role      @default(CUSTOMER)
  points           Int       @default(0)
  lastPointsUpdate DateTime  @default(now())
  discount         Boolean   @default(false)
  discountExpires  DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt()

  TrasactionEvent TrasactionEvent[]
  Review          Review[]
  Event           Event[]
}

enum Role {
  ADMIN
  CUSTOMER
  ORGANIZER
}
